// 전처리기에 의해 불러짐
// #이 붙은 줄은 마지막에 ;안붙임
#include <iostream>

// 리터럴 문자나 숫자표기
-- 문자 리터럴
    -- ''
    -- 이스케이프 시퀀스 \\ 처럼 \ 붙여서 사용하는
-- 문자열 리터럴
    -- ""
-- 숫자 리터럴
    -- 8진수 앞에 0
    -- 16진수 앞에 0x
-- 논리 리터럴

변수
-- 식별자
    -- 숫자로 시작 X
    -- 언더바만 가능
-- 형
    -- 큰 단위로 변환됨
-- 상수
    -- const
    -- 추후 변경불가

cout << 변수;
cin >> 변수1 >> 변수2;

전위연산자: 증가 후 대입
후위연산자: 대입 후 증가
복합대입연산자: += -= 등등

if
else if
else

switch(){
    case 값1:
    case 값2:
        ~~;
        break;
    default:
        ~~;
        break;
}

for(int i=1; i<=5; i++){

}

while(조건이 false될때까지){

}

do{
    // 조건을 판단하기 전에 블록 안의 코드를 실행
}while(조건);

continue; 뒷부분 실행 안하고 loop의 처음으로 돌아감

// 함수의 정의
메인 함수 앞에 쓸 경우 함수 프로토타입을 선언해줘야함
int max(int x, int y=10); 오른쪽 인수부터 기본인수 지정 가능
void buy() {

}

// 인라인 함수: 컴파일러에 의해 호출 부분에 직접 기록되므로 전체적인 속도 향상을 꾀할 수 있음
inline int max

// 다형성(polymorphism): 하나의 이름이 상황에 맞추어 다른기능을 가지는 것
-- 함수 오버로드: 함수 내부 처리 방법이 달라도 관계없는 경우
-- 함수 템플릿: 함수 내부의 처리 방법이 같지만, 다루는 형(type)이 다른 경우

int* pA; // 포인터 변수 선언
int& rA; // 레퍼런스 변수 선언 포인터 변수랑 뭐가 다른지 잘 모르겠음

// 배열
int test[5] = {};
배열 이름은 배열 첫 번째 요소의 주소를 저장하는 포인터와 같은 기능을 가진다
test test[0]
*(test+1) test[1]

char str[6] = "Hello";
char str[6] = {'H','e','l','l','o','\0'};
char* str = "Hello";
// 배열에는 문자열을 한번 대입하면 다시 대입할 수 없지만, 포인터에는 문자열을 열러번 대입할 수 있다.

strlen에는 \0은 포함되지 않은 길이가 나옴